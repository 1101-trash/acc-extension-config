[INCLUDE: materials_base.ini]

[FUNCTION: _PBR_EstimateF0]
; Schlick’s IOR-to-F0 approximation
ARGUMENTS = IOR
CODE = ' return math.pow( ( IOR - 1 ) / ( IOR + 1 ), 2 ) '

[FUNCTION: _PBR_EstimateF90]
; From Frostbite presentation:
; Moving Frostbite to Physically Based Rendering, page 78 here:
; https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
ARGUMENTS = IOR
CODE = ' return saturate( 50 * _PBR_EstimateF0(IOR) ) '

[DEFAULTS]
FilmIOR = $IOR

; Regular PBR glass shader
[TEMPLATE: Material_Glass EXTENDS _Base_Material_Custom]
; Main input parameters:
IOR = 1.5            ; index of refraction for glass, usualy, 1.5
FilmIOR = $IOR       ; redefine IOR for external film layer to increase reflections
ThicknessMult = 1.0  ; thicker glass passes less light through
ProfileFix = 0.04    ; adds thickness to glass for glazing angles

; Specially adjusted parameters:
; If needed, you can override those, but it’s not gonna be accurate.
FresnelC = $" _PBR_EstimateF0( $FilmIOR ) "
FresnelMax = $" _PBR_EstimateF90( $FilmIOR ) "

; Actual replacement
@OUTPUT = SHADER_REPLACEMENT_0_GLASS_...
TAGS = NEW_GLASS
SHADER = smGlass
PROP_0_EXTIOR = extIOR, $IOR
PROP_0_EXTTHICKNESSMULT = extThicknessMult, $ThicknessMult
PROP_0_EXTTHICKNESSPROFILEFIX = extThicknessProfileFix, $ProfileFix
PROP_0_FRESNELC = fresnelC, $FresnelC
PROP_0_FRESNELMAXLEVEL = fresnelMaxLevel, $FresnelMax

; Primitime attempt to recreate photoelasticity effect, nothing PBR about it
[TEMPLATE: Material_PhotoelasticGlass EXTENDS Material_Glass]
SHADER = smGlass_phel

FilmIOR = 3.2              ; looks better like this
PhotoelasticityMult = 0.5  ; doesn’t look good if too high

; Ideally, there would be a texture for that, but we’re not going to draw
; all those textures for Kunos cars, so here are some parameters for perlin noise
; instead
PhotoelasticityBaseScale = 6       ; this parameter alters scale in general
PhotoelasticityNoiseScale = 0.01   ; deeply affects randomization process, careful with it
PhotoelasticitySpotsScale = 0.33   ; spots for limiting effect to some areas
PhotoelasticitySpotsOffset = -0.1  ; offset for spots, to try and fit effect nice on existing meshes
PhotoelasticityStripesScale = 20   ; how many stripes are there

PROP_0_EXTPHELMULT = extPhelMult, $PhotoelasticityMult
PROP_0_EXTPHELBASESCALE = extPhelBaseScale, $PhotoelasticityBaseScale
PROP_0_EXTPHELNOISESCALE = extPhelNoiseScale, $PhotoelasticityNoiseScale
PROP_0_EXTPHELSPOTSSCALE = extPhelSpotsScale, $PhotoelasticitySpotsScale
PROP_0_EXTPHELSPOTSOFFSET = extPhelSpotsOffset, $PhotoelasticitySpotsOffset
PROP_0_EXTPHELSTRIPESSCALE = extPhelStripesScale, $PhotoelasticityStripesScale

; For easier usage, already setting up first material, optional
[Material_Glass]
Materials = ${ExteriorGlassMaterials}
Meshes = ${ExteriorGlassMeshes}

[Material_Glass]
Materials = ${ExteriorGlassTintedMaterials}
Meshes = ${ExteriorGlassTintedMeshes}
FilmIOR = 3.2
ThicknessMult = 3

[Material_Glass]
Materials = ${ExteriorGlassHeadlightsMaterials}
Meshes = ${ExteriorGlassHeadlightsMeshes}
FilmIOR = 2.2

[Material_PhotoelasticGlass]
Materials = ${ExteriorGlassPhotoelasticMaterials}
Meshes = ${ExteriorGlassPhotoelasticMeshes}