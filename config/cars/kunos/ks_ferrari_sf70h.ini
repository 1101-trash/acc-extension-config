[INCLUDE]
INCLUDE=common/f1_lights.ini, common/f1_tyre_damage.ini

[REAL_MIRROR_0]
FOV=13
IS_MONITOR=0
ROTATION=0.37, -0.01

[PARTICLES_FX]
SPARKS_AS=NONE
COLLIDER_2_SPARKS_AS=TITANIUM, SKIDPAD
COLLIDER_3_SPARKS_AS=TITANIUM, SKIDPAD
COLLIDER_5_SPARKS_AS=CARBON

[SHADOWED_TYRES]
EXTRA_AMBIENT_BRIGHTNESS=0.1

[REAL_MIRROR_1]
FOV=13
ROTATION=-0.37, -0.01

[TYRES_FX_CUSTOMTEXTURE_US]
TXDIFFUSE=cars\ks_ferrari_sf70h.zip::US.dds
TXBLUR=cars\ks_ferrari_sf70h.zip::US_blur.dds

[TYRES_FX_CUSTOMTEXTURE_SS]
TXDIFFUSE=cars\ks_ferrari_sf70h.zip::SS.dds
TXBLUR=cars\ks_ferrari_sf70h.zip::SS_blur.dds

[TYRES_FX_CUSTOMTEXTURE_S]
TXDIFFUSE=cars\ks_ferrari_sf70h.zip::S.dds
TXBLUR=cars\ks_ferrari_sf70h.zip::S_blur.dds

[TYRES_FX_CUSTOMTEXTURE_M]
TXDIFFUSE=cars\ks_ferrari_sf70h.zip::M.dds
TXBLUR=cars\ks_ferrari_sf70h.zip::M_blur.dds

[TYRES_FX_CUSTOMTEXTURE_H]
TXDIFFUSE=cars\ks_ferrari_sf70h.zip::H.dds
TXBLUR=cars\ks_ferrari_sf70h.zip::H_blur.dds

[INCLUDE: common/materials_interior.ini]
[Material_DigitalScreen]
Materials = LCD
ScreenScale = 160
ScreenAspectRatio = 0.5

[SHADER_REPLACEMENT_...]
MATERIALS = EXT_Sponsors
DEPTH_MODE = READ_ONLY

[SHADER_REPLACEMENT_...]
MATERIALS = EXT_Decals
DEPTH_MODE = READ_ONLY
MOVE_MESH_BEHIND = parent:modelRoot:y

; [DATA]
; DISABLE_DIGITALINSTRUMENTSINI=1

; Simplest example of an interactive display with a button and a message shown on change
; [SCRIPTABLE_DISPLAY_...]
; MESHES = g_LCD
; RESOLUTION = 512, 512
; DISPLAY_POS = 0, 3
; DISPLAY_SIZE = 512, 303
; INTERACTIVE = 1
; SCRIPT = '
; local lastMgukDelivery = -1
; local mgukDeliveryChange = 0.1
; local mgukDeliveryName = nil

; function update(dt)

;   --------
;   -- Button activating KERS when pressed:
;   --------

;   if not ui.rectHovered(vec2(100, 80), vec2(100, 80) + vec2(60, 80)) then
;     -- Button is not hovered: almost transparent
;     display.rect{ pos = vec2(100, 80), size = vec2(60, 80), color = rgbm(1, 0, 0, 0.1) }
;     ac.setKERS(false)
;   elseif not ui.mouseDown() then
;     -- Button is hovered, but not pressed: more opaque
;     display.rect{ pos = vec2(100, 80), size = vec2(60, 80), color = rgbm(1, 0, 0, 0.2) }
;     ac.setKERS(false)
;   else
;     -- Button is pressed: more opaque
;     display.rect{ pos = vec2(100, 80), size = vec2(60, 80), color = rgbm(1, 0, 0, 0.4) }
;     ac.setKERS(true)
;     -- ac.setEngineBrakeSetting(6) 

;     -- ac.setMGUHRecovery(100)
;     -- ac.setMGUHDelivery(2)
;   end

;   display.text{ font = "aria", pos = vec2(100, 90), letter = vec2(16, 30), text = "KERS", spacing = -2, alignment = 0.5, width = 60 }
;   display.text{ font = "aria", pos = vec2(100, 125), letter = vec2(16, 30), text = string.format("%.0f%%", car.kersCharge * 100), spacing = -2, alignment = 0.5, width = 60 }

;   --------
;   -- Message with current MGU-K mode, flashing on change:
;   --------

;   if lastMgukDelivery ~= car.mgukDelivery then
;     if lastMgukDelivery ~= -1 then
;       mgukDeliveryChange = 1
;     end
;     mgukDeliveryName = ac.getMGUKDeliveryName(car.index)  -- better to only get the name once it’s changed. not that it’s a big performance hit or anything, but still, gotta go fast
;     ac.debug("mgukDeliveryName", mgukDeliveryName == "" and "NONE" or mgukDeliveryName)
;     lastMgukDelivery = car.mgukDelivery
;   end

;   mgukDeliveryChange = math.applyLag(mgukDeliveryChange, 0.1, 0.8, dt)  -- fading to 10% opacity
;   display.rect{ pos = vec2(345, 55), size = vec2(90, 50), color = rgbm(0.5, 1, 0, mgukDeliveryChange) }
;   display.text{ font = "aria", pos = vec2(345, 70), letter = vec2(12, 20), text = mgukDeliveryName, spacing = -2, alignment = 0.5, width = 90 }

; end'