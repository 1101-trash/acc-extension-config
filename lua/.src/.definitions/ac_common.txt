ac.debug(key: string, value: string = "<nil>")
ac.setLogSilent(value: boolean = true)
ac.log(value: string)
ac.warn(value: string)
ac.error(value: string)
ac.dirname(): <lua_string_ref>
ac.getPatchVersion(): string
ac.getPatchVersionCode(): number
ac.getFolder(f: ac.FolderId): <lua_string_ref>
ac.getTrackId(): <lua_string_ref>
ac.getTrackLayout(): <lua_string_ref>
ac.getCameraPosition(): vec3
ac.getCameraUp(): vec3
ac.getCameraSide(): vec3
ac.getCameraForward(): vec3
ac.getCameraDirection(): vec3
ac.getCameraFOV(): number
ac.getCameraPositionTo(r: vec3)
ac.getCameraUpTo(r: vec3)
ac.getCameraSideTo(r: vec3)
ac.getCameraForwardTo(r: vec3)
ac.getCameraDirectionTo(r: vec3)
ac.getSunAngle(): number
ac.getSunPitchAngle(): number
ac.getSunHeadingAngle(): number
ac.getSoundSpeedMs(): number
ac.isInteriorView(): boolean
ac.isInReplayMode(): boolean
ac.lapTimeToString(time: number): <lua_string_ref>
ac.getAudioVolume(key: string): number
ac.getCarSpeedKmh(carIndex: number): number
ac.getGroundYApproximation(): number
ac.getDeltaT(): number
ac.getGameDeltaT(): number
ac.getConditionsTimeScale(): number
ac.getWindVelocity(): vec3
ac.getWindVelocityTo(r: vec3)
ac.readDataFile(value: string): <lua_string_ref>
ac.isWeatherFxActive(): boolean
ac.getTrackCoordinatesDeg(): vec2
ac.getTrackTimezoneBaseDst(): vec2
ac.getMGUKDeliveryName(carIndex: number, programIndex: number = -1): <lua_string_ref>
ac.getTyresName(carIndex: number, compoundIndex: number = -1): <lua_string_cached_ref>
ac.getDriverName(carIndex: number): <lua_string_cached_ref>
ac.getDriverNationCode(carIndex: number): <lua_string_cached_ref>
ac.getDriverNationality(carIndex: number): <lua_string_cached_ref>
ac.getDriverTeam(carIndex: number): <lua_string_cached_ref>
ac.hasTrackSpline(): boolean
ac.worldCoordinateToTrackProgress(v: vec3): number
ac.trackProgressToWorldCoordinate(v: number): vec3
ac.trackProgressToWorldCoordinateTo(v: number, r: vec3)
ac.worldCoordinateToTrack(v: vec3): vec3
ac.trackCoordinateToWorld(v: vec3): vec3
ac.setSystemMessage(msg: string, description: string)
ac.isJoystickButtonPressed(joystick: number, button: number): boolean
ac.getJoystickAxisValue(joystick: number, axis: number): number
ac.isJoystickAxisValue(joystick: number, axis: number): number
ac.getJoystickDpadValue(joystick: number, dpad: number): number
ac.isJoystickDpadValue(joystick: number, dpad: number): number
ac.setClipboadText(text: string)
ac.getTrackDataFilename(name: string): <lua_string_ref>
ac.getSimState(): stateSim
ac.getUiState(): stateUi
ac.getCarState(index: number): stateCar
ac.getSim(): stateSim
ac.getUI(): stateUi
ac.getCar(index: number): stateCar

struct stateWheel {
	float tyreRadius;
	float tyreWidth;
	float rimRadius;
	float tyreDirty;
	float tyreWear;
	float tyrePressure;
	float tyreTemperature;
	vec3 tyreTemperatureIMO;
	float discTemperature;
	float angularSpeed;
	float loadK;
	float slip;
	float slipAngle;
	float slipRatio;
	float ndSlip;
	float suspensionDamage;
	float suspensionTravel;
	vec3 contactNormal;
	vec3 contactPoint;
	vec3 pos;
	vec3 look;
	vec3 up;
	vec3 outside;
	bool isBlown;
}

struct stateCar {
	float mass;
	float maxFuel;
	float exposureOutside;
	float exposureInside;
	float shakeMultiplier;
	vec3 aabbCenter;
	vec3 aabbSize;
	int index; // zero-based (0 for first car)
	int gearCount;
	int turboCount;
	int tractionType; // 0 for rwd, 1 for fwd, 2 for awd, 3 for new awd, -1 for n/a
	int enginePosition; // 0 for unspecified, 1 for front, 2 for rear, 3 for mid
	bool hShifter;
	bool adjustableTurbo;
	bool brakesCockpitBias;
	float brakesBiasLimitDown;
	float brakesBiasLimitUp;
	float brakesBiasStep;
	vec3 pos;
	vec3 velocity;
	vec3 acceleration;
	vec3 angularVelocity;
	vec3 localAngularVelocity;
	vec3 up;
	vec3 look;
	vec3 side;
	float gas;
	float brake;
	float clutch;
	float steer;
	float handbrake;
	int gear;
	float fuel;
	float rpm;
	float rpmLimiter;
	float speedKmh;
	float turboBoost;
	float finalForceFeedback;
	float drivetrainSpeed;
	float waterTemperature;
	float cgHeight;
	int wheelsOutside;
	float engineLifeLeft;
	float damage[5];
	float gearboxDamage;
	int nodeIndex;
	int visibleIndex;
	float distanceToCamera;
	float splinePosition;
	float collisionDepth;
	int collidedWith; // 0 for track, non-zero for cars
	state_wheel wheels[4];
	bool isAiControlled;
	bool isInPitlane;
	bool isRetired;
	bool gearGrinding;
	bool headlightsActive;
	bool brakeLightsActive;
	bool flashingLightsActive;
	bool hornActive;
	bool focused;
	bool focusedOnInterior;
	bool specialHideLabels;
	bool hazardLights;
	bool turningLeftLights;
	bool turningRightLights;
	bool turningLeftOnly;
	bool turningRightOnly;
	bool lowBeams;
	bool extraA;
	bool extraB;
	bool extraC;
	bool extraD;
	bool extraE;
	bool extraF;
	bool kersCharging;
	float kersCharge;
	float kersInput;
	float kersCurrentKJ;
	float kersMaxKJ;
	float kersLoad;
	float distanceDrivenTotalKm;
	float distanceDrivenSessionKm;
	float poweredWheelsSpeed;
	float batteryVoltage;
	float oilPressure;
	float oilTemperature;
	float exhaustTemperature;
	int wiperMode;
	float wiperProgress;
	float bodyWetness;
	float compass;
	int lapTimeMs;
	int bestLapTimeMs;
	int previousLapTimeMs;
	int lapCount;
	int racePosition;
	int estimatedLapTimeMs;
	float performanceMeter;
	float performanceMeterSpeedDifferenceMs;
	int sessionLapCount;
	int compoundIndex;
	bool physicsAvailable;
	bool speedLimiterInAction;
	bool absInAction;
	bool tractionControlInAction;
	bool hasUserBrakeBias;
	bool hasEngineBrakeSettings;
	bool hasCockpitMGUHMode;
	bool hasCockpitERSDelivery;
	bool hasCockpitERSRecovery;
	bool drsPresent;
	bool drsAvailable;
	bool drsActive;
	bool kersPresent;
	bool kersHasButtonOverride;
	bool kersButtonPressed;
	bool mguhChargingBatteries;
	int mgukDelivery; // starts with 0
	int mgukDeliveryCount;
	int mgukRecovery; // from 0 to 10 (for 100%)
	int tractionControlMode; // 0 for disabled TC
	int absMode; // 0 for disabled ABS
	int brakeSettingsCount;
	int engineBrakeSettingsCount;
	int currentEngineBrakeSetting;
	float speedLimiter;
	float differentialPreload;
	float awdFrontShare;
	float drivetrainTorque;
	float drivetrainPower;
	float brakeBias;
	float turboBoosts[8];
	float turboWastegates[8];
	float tractionControl2;
	float fuelMap;
	float ffbFinal;
	float ffbPure;
}

struct stateSim {
	vec3 cameraPosition;
	vec3 cameraLook;
	vec3 cameraUp;
	int carsCount;
	int focusedCar;
	float dt;
	bool isFreeCameraOutside;
	bool isReplayActive;
	bool isFocusedOnInterior;
	bool isSessionStarted;
	bool controlsWithShifter;
	bool virtualMirrorActive;
	float ambientTemperature;
	float roadTemperature;
	float windSpeedKmh;
	vec2 windVelocityKmh;
	float windDirectionDeg;
	float rainIntensity;
	float rainWetness;
	float rainWater;
	float timeTotalSeconds;
	int timeHours;
	int timeMinutes;
	int timeSeconds;
	int raceFlagType;
	int raceSessionType;
	float timeToSessionStart;
	float sessionTimeLeft;
	int currentSessionIndex;
	int sessionsCoint;
	float trackLengthM;
	float speedLimitKmh;
	float fps;
	float fpsCapped;
	float physicsLate;
	int cpuOccupancy;
	float cpuTime;
	int cameraMode;
	int driveableCameraMode;
	int carCameraMode;
	float audioMasterVolume;
}

struct stateUi {
	vec2 windowSize;
	vec2 mousePos;
	float dt;
	bool isMouseLeftKeyClicked;
	bool isMouseRightKeyClicked;
	bool isMouseLeftKeyDown;
	bool isMouseRightKeyDown;
	bool ctrlDown;
	bool shiftDown;
	bool altDown;
}